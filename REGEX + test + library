import re #This imports the library re

def validate_email(email): #this is setting up the function and defining "validate_email"

    pattern = r'^[a-zA-Z0-9]+@[a-zA-Z0-9]+\.(ac\.uk|gov\.uk|nhs\.net)$' #This line does a lot, it starts the beginning of the string. The [a-zA-z0-9] determines the fact that the input must be between any alphabetical letter or number 0-9, also says that the domain must be either a Kent, Government or NHS domain name. 

    match = re.match(pattern, email)#This checks if the string matches the REGEX pattern previously defined
    if match:
        domain_type = match.group(1)#this extracts a specific part of the match using the group method from the 'match' object which was returned by 're.match()'
        if domain_type == 'ac.uk':
            return "This is a Valid Academic Email"
        elif domain_type == 'gov.uk':#this means that if the return is not a valid academic email, it will check if it contains a Government email
            return "This is a Valid Government Email"
        elif domain_type == 'nhs.net':
            return "This is a Valid NHS Email"
    else:
        if not re.match(r'^[a-zA-Z0-9]+@[a-zA-Z0-9]+\..+$', email):
            return "Email provided is invalid, it must only consist of letters and numbers, try again."#This shows that if all of the above conditions fail, it will give a print statement telling the user that i
       
def main():
    email = input("Enter an email address: ")#this asks the user for an email which is the input
    result = validate_email(email)#this runs the input through the function
    print(result)

if __name__ == "__main__":
    main()

    import unittest #this imports the unit test library
from validate_email_script import validate_email

class TestEmailValidation(unittest.TestCase):#this defines the test case class 

    def test_valid_academic_email(self):
        self.assertEqual(validate_email("student@university.ac.uk"), "This Academic email has has been validated") #This tests if the result from the function is equal to the expected result

    def test_valid_government_email(self):
        self.assertEqual(validate_email("employee@department.gov.uk"), "This Government email has been validated")

    def test_valid_nhs_email(self):
        self.assertEqual(validate_email("doctor@hospital.nhs.net"), "This NHS email has been validated")

    def test_invalid_email_no_tld(self):
        self.assertEqual(validate_email("user@domain"), "Email provided is invalid, it must only consist of letters and numbers, try again.")

if __name__ == "__main__": #this checks whether the script is going to be directly executed or imported and will either run or skip the script.
    unittest.main()

